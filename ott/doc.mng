\documentclass{article}

\usepackage{amsmath,amssymb}
\usepackage[margin=1in]{geometry}
\usepackage{multicol}
\usepackage{ottalt}
\usepackage{xcolor}
\usepackage{xspace}
\usepackage{bbold}
\DeclareSymbolFont{bbsymbol}{U}{bbold}{m}{n}
\DeclareMathSymbol{\bbcomma}{\mathbin}{bbsymbol}{"2C}

\inputott{ott}

\newcommand\calculus{$\mathsf{F}_i^+$\xspace}

\title{Compiling from \calculus to JavaScript}
\author{Yaozhu Sun}

\begin{document}

\maketitle

\section*{Syntax of \calculus}
\begin{align*}
  &\text{Types}          &A,B,C ::=&~ [[Top]] ~|~ [[Bot]] ~|~ [[Base]] ~|~ [[X]] ~|~ [[A -> B]] ~|~ [[Forall X*A. B]] ~|~ [[{l : A}]] ~|~ [[A & B]] \\
  % &\text{Ordinary types} &[[Aord]],[[Bord]],[[Cord]] ::=&~ [[Top]] ~|~ [[Bot]] ~|~ [[Base]] ~|~ [[X]] ~|~ [[A -> Bord]] ~|~ [[Forall X*A. Bord]] ~|~ [[{l : Aord}]] \\
  &\text{Expressions}    &    e ::=&~ [[{}]] ~|~ [[b]] ~|~ [[x]] ~|~ [[fix x:A. e]] ~|~ [[\x:A. e:B]] ~|~ [[e1 e2]] ~|~ [[/\X*A. e:B]] ~|~ [[e A]] \\
  &                      &        |&~ [[{l = e}]] ~|~ [[e.l]] ~|~ [[e1 ,, e2]] ~|~ [[e : A]] \\
  &\text{Type indices}   &[[T]] ::=&~ [[Base]] ~|~ [[->T]] ~|~ [[\-/T]] ~|~ [[{l : T}]] ~|~ [[T1 & T2]] \\
  &\text{JavaScript code}&[[J]] ::=&~ [[nothing]] ~|~ [[J1;J2]] ~|~ [[code]]
\end{align*}

\bigskip
\ottdefncompile

\begin{multicols}{3}
\begin{verbatim}
/* J-Gen */
var z = {};  J;

/* J-Int */
z[T] = n;

/* J-Var */
copy(z, x);

/* J-Fix */
var x = z;  J;

/* J-Abs */
z[T] = (x, y) => { J };

/* J-App */
J1;
var y0 = {};
for (const T of Ts)
  y0.__defineGetter__(T,
    () => {
      for (const T of Ts)
        delete this[T];
      J2;
      return this[T];
    });
J3;

/* J-TAbs */
z[T] = (X, y) => { J };

/* J-Rcd */
z.__defineGetter__(T, () => {
  J;
  delete this[T];
  return this[T] = y;
});

/* J-Def */
export var x = {};
J1;
J2;
\end{verbatim}
\end{multicols}

\vfill
\paragraph{Copying properties} n.b. there seems to be some alternatives:
\begin{itemize}
  \item \texttt{Object.assign(z, x)} does not properly copy getters;
  \item \texttt{Object.defineProperties(z, Object.getOwnPropertyDescriptors(x))} is proper but slow;
  \item \texttt{Object.setPrototypeOf(z, x)} does the prototype trick but is even slower.
\end{itemize}
\begin{verbatim}
function copy(z, x) {
  for (const prop in x) {
    var getter = x.__lookupGetter__(prop);
    if (getter) z.__defineGetter__(prop, getter);
    else z[prop] = x[prop];
  }
}
\end{verbatim}

\newpage
\ottdefndistapp

\begin{multicols}{2}
\begin{verbatim}
/* A-Arrow */
var y0 = {};
for (const T of Ts)
  y0.__defineGetter__(T, () => {
    for (const T of Ts)
      delete this[T];
    J;
    return this[T];
  });
x[T](y0, z);

/* A-ArrowEquiv */
x[T](y, z);

/* A-All */
x[T](Ts, z);




\end{verbatim}
\end{multicols}

\vfill
\ottdefndistproj

\begin{verbatim}
/* P-RcdEq */
copy(z, x[T]);
\end{verbatim}

\newpage
\ottdefncosub

\begin{multicols}{3}
\begin{verbatim}
/* S-Equiv */
copy(y, x);

/* S-Bot */
y[T] = null;

/* S-Split */
var y1 = {}; // if y1 != z
var y2 = {}; // if y2 != z
J1;  J2;  J3;

/* S-Int */
y[T] = x[T];

/* S-Var */
copy(y, x);

/* S-Arrow */
y[T2] = (x1, y2) => {
  var y1 = {};
  for (const T of Ts)
    y1.__defineGetter__(T,
      () => {
        for (const T of Ts)
          delete this[T];
        J1;
        return this[T];
      });
  var x2 = {};
  x[T1](y1, x2);
  J2;
};

/* S-All */
y[T2] = (X, y0) => {
  var x0 = {};
  x[T1](X, x0);
  J;
};

/* S-Rcd */
y.__defineGetter__(T2, () => {
  var x0 = x[T1];
  var y0 = {};  J;
  delete this[T];
  return this[T] = y0;
});
\end{verbatim}
\end{multicols}

\newpage
\ottdefncomerge

\begin{multicols}{3}
\begin{verbatim}
/* M-Arrow */
z[T] = (p, y) => {
  var y1 = {}; // if y1 != y
  var y2 = {}; // if y2 != y
  x1[T1](p, y1);
  x2[T2](p, y2);
  J;
};





/* M-All */
z[T] = (X, y) => {
  var y1 = {}; // if y1 != y
  var y2 = {}; // if y2 != y
  x1[T1](X, y1);
  x2[T2](X, y2);
  J;
};





/* M-Rcd */
z.__defineGetter__(T, () => {
  var y = {};
  var y1 = {}; // if y1 != y
  var y2 = {}; // if y2 != y
  copy(y1, x1[T1]);
  copy(y2, x2[T2]);
  J;
  delete this[T];
  return this[T] = y;
});
\end{verbatim}
\end{multicols}

\end{document}
