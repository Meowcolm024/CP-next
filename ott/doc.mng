\documentclass{article}

\usepackage{amsmath,amssymb}
\usepackage[margin=1in]{geometry}
\usepackage{multicol}
\usepackage{ottalt}
\usepackage{xcolor}
\usepackage{xspace}

\inputott{ott}

\newcommand\calculus{$\mathsf{F}_i^+$\xspace}

\title{
  Compiling from \calculus to JavaScript \\
  \large (simplified scheme with call-by-value)
}
\author{Yaozhu Sun}

\begin{document}

\maketitle

\section*{Syntax of \calculus}
\begin{align*}
  &\text{Types}       &A,B,C ::=&~ [[Top]] ~|~ [[Bot]] ~|~ [[Base]] ~|~ [[X]] ~|~ [[A -> B]] ~|~ [[Forall X*A. B]] ~|~ [[{l : A}]] ~|~ [[A & B]] \\
  &\text{Type indices}&[[T]] ::=&~ [[Base]] ~|~ [[->T]] ~|~ [[\-/T]] ~|~ [[{l : T}]] ~|~ [[T1 & T2]] \\
  &\text{Expressions} &    e ::=&~ [[{}]] ~|~ [[b]] ~|~ [[x]] ~|~ [[fix x:A. e]] ~|~ [[\x:A. e:B]] ~|~ [[e1 e2]] ~|~ [[/\X*A. e:B]] ~|~ [[e A]] ~|~ [[{l = e}]] ~|~ [[e.l]] \\
  &                   &        |&~ [[e1 ,, e2]] ~|~ [[e : A]] \\
  &\text{Values}      &    v ::=&~ [[{}]] ~|~ [[b]] ~|~ [[\x:A. e:B]] ~|~ [[/\X*A. e:B]] ~|~ [[{l = v}]] ~|~ [[v1 ,, v2]] \\
\end{align*}

\noindent
\boxed{[[|A|]] = [[T]]} \hfill \textit{(Type translation)}
\begin{mathpar}
\inferrule{}{ [[|Base|]] = [[Base]] }
\and
\inferrule{}{ [[|X|]] = \mathbf{atoi}(X) }
\and
\inferrule{}{ [[|A->B|]] = [[->|B|]] }
\and
\inferrule{}{ [[|Forall X*A. B|]] = [[\-/|B|]] }
\and
\inferrule{}{ [[|{l:A}|]] = [[{l:|A|}]] }
\and
\inferrule
{ A_{k_1} < A_{k_2} < \cdots < A_{k_m} \\ \neg \rceil A_k \lceil }
{ |A_1\&A_2\&\cdots\&A_n| = |A_{k_1}|\&|A_{k_2}|\&\cdots\&|A_{k_m}| }
\end{mathpar}

\ottdefntoplike

\ottdefnordinary

\newpage
\ottdefncompile
\bigskip\bigskip\bigskip

\begin{multicols}{3}
\begin{verbatim}
/* J-Gen */
var z = {};  J;

/* J-Base */
z[T] = b;

/* J-Var */
Object.assign(z, x);

/* J-Fix */
var x = z;  J;

/* J-Abs */
z[T] = (x, y) => { J };

/* J-TAbs */
z[T] = (X, y) => { J };

/* J-Rcd */
J;
z[T] = y;

/* J-Def */
export var x = {};
J1;
J2;
\end{verbatim}
\end{multicols}

\vfill
\ottdefndistapp

\begin{multicols}{2}
\begin{verbatim}
/* A-Arrow */
var y0 = {};  J;
x[T](y0, z);

/* A-All */
x[T](Ts, z);
\end{verbatim}
\end{multicols}

\vfill
\ottdefndistproj

\begin{verbatim}
/* P-Rcd */
Object.assign(z, x[T]);
\end{verbatim}

\newpage
\ottdefncosub

\begin{multicols}{3}
\begin{verbatim}
/* S-Bot */
y[T] = null;

/* S-Eq */
Object.assign(y, x);

/* S-Base */
y[T] = x[T];

/* S-Var */
for (var T of X) {
  y[T] = x[T];
}

/* S-Arrow */
y[T2] = (x1, y2) => {
  var y1 = {};  J1;
  var x2 = {};
  x[T1](y1, x2);
  J2;
};

/* S-All */
y[T2] = (X, y0) => {
  var x0 = {};
  x[T1](X, x0);
  J;
};

/* S-Rcd */
var x0 = x[T1];
var y0 = {};  J;
y[T2] = y0;

/* S-Split */
var y1 = {}; // if y1 != z
var y2 = {}; // if y2 != z
J1;  J2;  J3;
\end{verbatim}
\end{multicols}

\newpage
\ottdefncomerge

\begin{multicols}{3}
\begin{verbatim}
/* M-Arrow */
z[T] = (p, y) => {
  var y1 = {}; // if y1 != y
  var y2 = {}; // if y2 != y
  x1[T1](p, y1);
  x2[T2](p, y2);
  J;
};

/* M-All */
z[T] = (X, y) => {
  var y1 = {}; // if y1 != y
  var y2 = {}; // if y2 != y
  x1[T1](X, y1);
  x2[T2](X, y2);
  J;
};

/* M-Rcd */
var y = {};
var y1 = {}; // if y1 != y
var y2 = {}; // if y2 != y
Object.assign(y1, x1[T1]);
Object.assign(y2, x2[T2]);
J;
z[T] = y;
\end{verbatim}
\end{multicols}

\end{document}
